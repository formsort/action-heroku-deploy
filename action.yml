name: "Zero-waste Heroku Deploy"
description: "Deploy to Heroku with a repo tarball"
inputs:
  github_repo:
    description: "GitHub repo name with owner (eg. formsort/formsort)"
    required: true
  github_token:
    description: "GITHUB_TOKEN"
    required: true
  heroku_api_key:
    description: "API Key for the Heroku account that will perform the deploy"
    required: true
  heroku_app_name:
    description: "Name of the Heroku app to be deployed"
    required: true
  heroku_app_version:
    description: "The new version of the app to be deployed. Will fall back to `inputs.ref` if not provided."
    required: false
  ref:
    description: "Git ref to deploy to Heroku"
    required: true
    default: ""
outputs:
  source_tarball:
    description: The URL of the source tarball used to create the build
    value: ${{ steps.source_blob.outputs.link }}
  build:
    description: "The JSON blob of the build created by Heroku"
    value: ${{ steps.create_build.outputs.build }}
  build_id:
    description: "The id of the build created by Heroku"
    value: ${{ steps.create_build.outputs.id }}
  build_log:
    description: "The logs for the build created by Heroku"
    value: ${{ steps.build_logs.outputs.text }}
  release:
    description: "The JSON blob of the release created by Heroku"
    value: ${{ steps.get_release.outputs.release }}
  release_id:
    description: "The id of the release created by Heroku"
    value: ${{ steps.get_release.outputs.id }}
  release_log:
    description: "The logs for the release created by Heroku"
    value: ${{ steps.release_logs.outputs.text }}
runs:
  using: "composite"
  steps:
    - id: pipeline_check
      name: Check if app is part of a pipeline_check
      continue-on-error: true
      shell: bash
      run: |
        # Try to determine if the app is part of a pipeline *and* it is in production stage
        # If the app is NOT part of any pipelines, this endpoint will return 404, causing `curl`
        # to exit with a failure code (see the `-f` flag) and will fail the rest of the step.
        # This is why we have `continue-on-error` set to true above.
        pipeline_couplings=$(\
          curl -fsS 'https://api.heroku.com/apps/${{ inputs.heroku_app_name }}/pipeline-couplings' \
            -H 'Authorization: Bearer ${{ inputs.heroku_api_key }}' \
            -H 'Accept: application/vnd.heroku+json; version=3' \
        )
        if [[ $(echo "$pipeline_couplings" | jq -r .stage) != 'production' ]]; then
          exit;
        fi

        pipeline_id=$(echo "$pipeline_couplings" | jq -r .pipeline.id)
        # Get all the apps in the pipeline our app is associated with
        all_pipeline_couplings=$(\
          curl -fsS "https://api.heroku.com/pipelines/$pipeline_id/pipeline-couplings" \
            -H 'Authorization: Bearer ${{ inputs.heroku_api_key }}' \
            -H 'Accept: application/vnd.heroku+json; version=3' \
        )
        # Get the app id for the app designated as "staging" from the pipeline. Remember, we expected the
        # app we are deploying to be the `production` app and we can only promote to that from `staging`.
        staging_app_id=$(echo "$all_pipeline_couplings" | jq -r '.[] | select(.stage == "staging").app.id')

        # Get the latest builds on pipeline to see if there's a successful build associated with the
        # staging app we just found above AND the SHA we are trying to deploy for.
        latest_pipeline_builds=$(\
          curl -fsS "https://api.heroku.com/pipelines/$pipeline_id/latest_builds" \
            -H 'Authorization: Bearer ${{ inputs.heroku_api_key }}' \
            -H 'Accept: application/vnd.heroku+json; version=3' \
        )

        applicable_build_id=$(\
          echo "$latest_pipeline_builds" | \
          jq -r '.[] | select(.app.id == "'"$staging_app_id"'" and .status == "succeeded" and .source_blob.version == "${{ inputs.ref }}").id')

        # IF we have a build on staging with the SHA we are trying to deploy across latest builds,
        # set the outputs so the next steps will try to promote instead of doing a full build & release
        if [[ -n "$applicable_build_id" ]]; then
          echo "::set-output name=pipeline_id::$pipeline_id"
          echo "::set-output name=source_app_id::$staging_app_id"
          target_app_id=$(echo "$pipeline_couplings" | jq -r .app.id)
          echo "::set-output name=target_app_id::$target_app_id"
        fi
    - id: source_blob
      name: Get link to source blob
      if: "!steps.pipeline_check.outputs.pipeline_id"
      shell: bash
      run: |
        echo "::set-output name=link::$(\
          curl -fsS 'https://api.github.com/repos/${{ inputs.github_repo }}/tarball/${{ inputs.ref }}' \
          -H 'Authorization: token ${{ inputs.github_token }}' -D - -o /dev/null | awk -v RS='\r\n' -v OFS='' -F'location: ' '$2 {print $2}' \
        )"
    - id: create_build
      name: Create Heroku build
      if: "!steps.pipeline_check.outputs.pipeline_id"
      shell: bash
      run: |
        heroku_build=$(curl -fsS -X POST 'https://api.heroku.com/apps/${{ inputs.heroku_app_name }}/builds' \
          -d '{"source_blob":{"url":"${{ steps.source_blob.outputs.link }}", "version": "${{ inputs.heroku_app_version || inputs.ref }}"}}' \
          -H 'Content-Type: application/json' \
          -H 'Authorization: Bearer ${{ inputs.heroku_api_key }}' \
          -H 'Accept: application/vnd.heroku+json; version=3' \
        )
        echo "::set-output name=build::$heroku_build"

        build_id=$(echo "$heroku_build" | jq -r .id)
        echo "::set-output name=id::$build_id"
    - id: build_logs
      name: Heroku build logs
      if: "!steps.pipeline_check.outputs.pipeline_id"
      shell: bash
      run: |
        # Wait till the build finishes
        curl -fsSN $(echo '${{ steps.create_build.outputs.build }}' | jq -r .output_stream_url) | tee build_log.txt
        echo "::set-output name=text::$(cat build_log.txt)"
    - id: promote
      name: Promote
      if: steps.pipeline_check.outputs.pipeline_id
      shell: bash
      run: |
        heroku_promotion=$(curl -fsS -X POST 'https://api.heroku.com/pipeline-promotions' \
          -d '{"pipeline":{"id":"${{ steps.pipeline_check.outputs.pipeline_id }}", "source":{"app":{"id": "${{ steps.pipeline_check.outputs.source_app_id }}"}}, "targets":[{"app":{"id": "${{ steps.pipeline_check.outputs.target_app_id }}"}}]' \
          -H 'Content-Type: application/json' \
          -H 'Authorization: Bearer ${{ inputs.heroku_api_key }}' \
          -H 'Accept: application/vnd.heroku+json; version=3' \
        )
        echo "::set-output name=promotion::$heroku_promotion"

        release_id=$(echo "$heroku_promotion" | jq -r .source.release.id)
        echo "::set-output name=release_id::$release_id"
    - id: get_release
      name: Get Heroku release
      shell: bash
      run: |
        release_id='${{ steps.promote.outputs.release_id }}'
        if [[ -z "$release_id" ]]; then
          release_id=$(curl -fsS 'https://api.heroku.com/apps/${{ inputs.heroku_app_name }}/builds/${{ steps.create_build.outputs.id }}' \
            -H 'Authorization: Bearer ${{ inputs.heroku_api_key }}' \
            -H 'Accept: application/vnd.heroku+json; version=3' | jq -r .release.id)
        fi
        echo "::set-output name=id::$release_id"

        heroku_release=$(curl -fsS "https://api.heroku.com/apps/${{ inputs.heroku_app_name }}/releases/$release_id" \
          -H 'Authorization: Bearer ${{ inputs.heroku_api_key }}' \
          -H 'Accept: application/vnd.heroku+json; version=3')
        echo "::set-output name=release::$heroku_release"
    - id: release_logs
      name: Heroku release logs
      shell: bash
      run: |
        # Wait till the release finishes
        curl -fsSN $(echo '${{ steps.get_release.outputs.release }}' | jq -r .output_stream_url) | tee release_log.txt
        echo "::set-output name=text::$(cat release_log.txt)"

branding:
  color: green
  icon: upload-cloud
