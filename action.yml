name: "Zero-waste Heroku Deploy"
description: "Deploy to Heroku with a repo tarball"
inputs:
  github_repo:
    description: "GitHub repo name with owner (eg. formsort/formsort)"
    required: true
  github_token:
    description: "GITHUB_TOKEN"
    required: true
  heroku_api_key:
    description: "API Key for the Heroku account that will perform the deploy"
    required: true
  heroku_app_name:
    description: "Name of the Heroku app to be deployed"
    required: true
  heroku_app_version:
    description: "The new version of the app to be deployed. Will fall back to `inputs.ref` if not provided."
    required: false
  ref:
    description: "Git ref to deploy to Heroku"
    required: true
    default: ""
outputs:
  source_tarball:
    description: The URL of the source tarball used to create the build
    value: ${{ steps.source_blob.outputs.link }}
  build:
    description: "The JSON blob of the build created by Heroku"
    value: ${{ steps.create_build.outputs.build }}
  build_id:
    description: "The id of the build created by Heroku"
    value: ${{ steps.create_build.outputs.id }}
  build_log:
    description: "The logs for the build created by Heroku"
    value: ${{ steps.build_logs.outputs.text }}
  release:
    description: "The JSON blob of the release created by Heroku"
    value: ${{ steps.get_release.outputs.release }}
  release_id:
    description: "The id of the release created by Heroku"
    value: ${{ steps.get_release.outputs.id }}
  release_log:
    description: "The logs for the release created by Heroku"
    value: ${{ steps.release_logs.outputs.text }}
runs:
  using: "composite"
  steps:
    - id: source_blob
      name: Get link to source blob
      shell: bash
      run: |
        link_blob=$(\
          curl -fsS 'https://api.github.com/repos/${{ inputs.github_repo }}/tarball/${{ inputs.ref }}' \
          -H "Authorization: token ${{ inputs.github_token }}" -D - -o /dev/null | awk -v RS='\r\n' -v OFS='' -F'location: ' '$2 {print $2}' \
        )
        echo "::add-mask::$link_blob"
        echo ::set-output name=link::$link_blob
    - id: create_build
      name: Create Heroku build
      shell: bash
      run: |
        heroku_build=$(curl -fsS -X POST 'https://api.heroku.com/apps/${{ inputs.heroku_app_name }}/builds' \
          -d '{"source_blob":{"url":"${{ steps.source_blob.outputs.link }}", "version": "${{ inputs.heroku_app_version || inputs.ref }}"}}' \
          -H "Authorization: Bearer ${{ inputs.heroku_api_key }}" \
          -H 'Accept: application/vnd.heroku+json; version=3' \
          -H "Content-Type: application/json")
        echo ::set-output name=build::$heroku_build

        build_id=$(echo $heroku_build | jq -r .id)
        echo ::set-output name=id::$(echo $build_id)
    - id: build_logs
      name: Heroku build logs
      shell: bash
      run: |
        # Wait till the build finishes
        curl -fsSN $(echo '${{ steps.create_build.outputs.build }}' | jq -r .output_stream_url) | tee build_log.txt
        echo ::set-output name=text::$(echo build_log.txt)
    - id: get_release
      name: Get Heroku release
      shell: bash
      run: |
        release_id=$(curl -fsS 'https://api.heroku.com/apps/fs-${{ matrix.app }}-beta/builds/${{ steps.create_build.outputs.id }}' \
          -H 'Authorization: Bearer ${{ inputs.heroku_api_key }}' \
          -H 'Accept: application/vnd.heroku+json; version=3' | jq -r .release.id)
        echo ::set-output name=id::$(echo $release_id)

        heroku_release=$(curl -fsS "https://api.heroku.com/apps/fs-${{ matrix.app }}-beta/releases/$release_id" \
          -H 'Authorization: Bearer ${{ inputs.heroku_api_key }}' \
          -H 'Accept: application/vnd.heroku+json; version=3')
        echo ::set-output name=release::$(echo $heroku_release)
    - id: release_logs
      name: Heroku release logs
      shell: bash
      run: |
        # Wait till the release finishes
        curl -fsSN $(echo '${{ steps.get_release.outputs.release }}' | jq -r .output_stream_url) | tee release_log.text
        echo ::set-output name=text::$(echo release_log.txt)

branding:
  color: green
  icon: upload-cloud
